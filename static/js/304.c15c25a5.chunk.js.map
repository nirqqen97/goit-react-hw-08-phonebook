{"version":3,"file":"static/js/304.c15c25a5.chunk.js","mappings":"gRAOaA,GALYC,EAAAA,EAAAA,IAAH,yFAKDA,EAAAA,EAAAA,GAAH,uB,oBCJLC,EAAWD,EAAAA,EAAAA,KAAH,4FAMRE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,EAAPH,CAAH,mEAUTI,GANQJ,EAAAA,EAAAA,MAAH,0FAMGA,EAAAA,EAAAA,MAAH,uB,8BCbLK,EAAO,WAChB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACOC,GAAOC,EAAAA,EAAAA,MAAPD,KACP,GAAkBE,EAAAA,EAAAA,MAAXC,GAAP,eA0BIC,EAAa,SAACR,EAAME,IALM,SAACE,EAAMK,GAE/B,YADkEC,KAA9C,OAAJN,QAAI,IAAJA,OAAA,EAAAA,EAAMO,MAAK,SAAAC,GAAO,OAAIA,EAAQZ,OAASS,CAArB,IAEnC,CAGDI,CAAkBT,EAAMJ,GAI5BO,EAAQP,EAAKE,GAHXY,MAAM,GAAD,OAAId,EAAJ,2BAIR,EAED,OACU,UAACN,EAAD,CAAUqB,aAAa,MAAMC,SA3BhB,SAACC,GAClBA,EAAEC,iBAKFV,EAJgB,CACdR,KAAAA,EACAE,OAAAA,IAGFC,EAAU,IACVF,EAAQ,IACRgB,EAAEE,OAAOC,OACR,EAiBG,WACA,SAACvB,EAAD,WACI,SAACwB,EAAA,EAAD,CAAWC,KAAM,OACVtB,KAAO,OACPuB,SArCM,SAACN,GACtBhB,EAAQgB,EAAEO,cAAcf,MAC3B,EAoCkBgB,QAAS,yHACTC,MAAS,yIACTjB,MAAST,EACT2B,GAAG,eACHC,MAAM,OACNC,QAAQ,SACRC,UAAQ,OAGnB,SAACjC,EAAD,WACI,SAACwB,EAAA,EAAD,CAAWC,KAAM,OACVtB,KAAO,YACPuB,SA/CO,SAACN,GACvBd,EAAUc,EAAEO,cAAcf,MAC7B,EA8CkBgB,QAAW,yFACXhB,MAASP,EACTyB,GAAG,eACHC,MAAM,QACNC,QAAQ,SACRH,MAAS,oGAGpB,SAAC/B,EAAD,CAAWkC,QAAQ,YAAYP,KAAK,SAApC,sBAIX,E,oBCpEYzB,GALQJ,EAAAA,EAAAA,MAAH,0FAKGA,EAAAA,EAAAA,MAAH,uBCALsC,EAAc,WACvB,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GACrBC,GAAWC,EAAAA,EAAAA,MAKpB,OACQ,SAAC,EAAD,WACI,SAACf,EAAA,EAAD,CACAQ,QAAQ,SACRD,MAAM,wBACNS,QARe,SAAC,GAAgB,IAAflB,EAAc,EAAdA,OAElBgB,GAASG,EAAAA,EAAAA,GAAkBnB,EAAOV,OAAQ,EAOzCgB,QAAS,yHACThB,MAAQuB,KAEpB,ECdKO,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAEbC,EAAe,WAC1B,IAAMN,GAAWC,EAAAA,EAAAA,MACjB,GAAiC/B,EAAAA,EAAAA,MAAzBqC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,UACbX,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAK3B,OACE,iCACE,SAACpC,EAAD,KACA,SAACN,EAAD,wBACA,SAACuC,EAAD,CAAaM,QARC,SAAC5B,GACjB0B,GAASG,EAAAA,EAAAA,GAAkB7B,GAC5B,EAMoCA,MAAOuB,IACvCU,IAAa,SAAClD,EAAD,yBACbmD,IACC,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAACN,EAAD,QAKT,EAED,G,uDCjCO,IAAML,EAAgB,SAAAY,GAAK,OAAKA,EAAMd,OAAOe,MAAlB,C","sources":["ContactsPage/ContactsPage.styled.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/InputFilter/InputFilter.styled.jsx","components/InputFilter/InputFilter.jsx","ContactsPage/ContactsPage.jsx","redux/Contacts/Contacts.selector.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n    margin-left :15px;\n    margin-right :15px;\n    width:1200px`;\n\nexport const Title = styled.h1``","import styled from '@emotion/styled';\nimport Button from '@mui/material/Button';\n\nexport const FormWrap = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap:15px;\n    `;\n\nexport const SubmitBtn = styled(Button)`\n    width:100px;    \n    text-align:center`;\n\nexport const Input = styled.input`\n    display: flex;\n    flex-direction: column;\n    width: 200px;`;\n\n    \nexport const Label = styled.label``;\n\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {FormWrap,SubmitBtn, Label} from \"./Form.styled\";\nimport { usePostContactsMutation, useFetchContactsQuery } from \"redux/rtk-contacts/rtk-contacts.api\";\nimport TextField from '@mui/material/TextField';\n\nexport const Form = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const {data}= useFetchContactsQuery()\n    const [addUser] = usePostContactsMutation()\n\n    const handleNameChange = (e) =>{\n        setName(e.currentTarget.value)\n    }\n    const handlePhoneChange = (e) =>{\n        setNumber(e.currentTarget.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const contact = {\n          name,\n          number\n        }\n        addContact(contact);\n        setNumber(\"\");\n        setName('');\n        e.target.reset()\n        }\n       \n         \n        const checkIsInContacts = (data, value) => {\n          const checked = data?.find(contact => contact.name === value) !== undefined;\n          return checked\n        }\n        \n  const addContact = (name, number) => {\n    if (checkIsInContacts(data, name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    addUser(name,number );\n  };\n\n  return(\n            <FormWrap autoComplete=\"off\" onSubmit={handleSubmit}>\n            <Label>\n                <TextField type={\"text\"} \n                       name ={\"name\"}\n                       onChange ={handleNameChange}\n                       pattern={\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"}\n                       title = {\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"}\n                       value = {name}\n                       id=\"filled-basic\" \n                       label=\"Name\" \n                       variant=\"filled\"\n                       required/>\n                       \n            </Label>\n            <Label>\n                <TextField type={\"text\"} \n                       name ={\"telephone\"}\n                       onChange ={handlePhoneChange}\n                       pattern = {\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\"}\n                       value = {number}\n                       id=\"filled-basic\" \n                       label=\"Phone\" \n                       variant=\"filled\"\n                       title = {\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"}/>\n                       \n            </Label>\n            <SubmitBtn variant=\"contained\" type=\"submit\">Submit</SubmitBtn>\n        </FormWrap>\n        )\n    \n}\nForm.propTypes = {\n    addContact: PropTypes.func,\n}","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n    display: flex;\n    flex-direction: column;\n    width: 200px;`\n\nexport const Label = styled.label``","import PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilters } from \"redux/Contacts/Contacts.selector\";\nimport { usersSearchAction } from \"redux/Contacts/Contacts.slice\";\nimport {Label } from \"./InputFilter.styled\";\nimport TextField from '@mui/material/TextField';\n\nexport const InputFilter = () => {\n    const filter = useSelector(selectFilters);\n    const dispatch = useDispatch()\n \n        const handeInput =  ({target, }) => {\n            \n            dispatch(usersSearchAction(target.value))}\n return ( \n         <Label>\n             <TextField\n             variant=\"filled\" \n             label=\"Find contacts by name\" \n             onInput={handeInput}\n             pattern={\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"}\n             value ={filter}/>\n         </Label>)\n}\n\nInputFilter.propTypes = {\n    addFilter: PropTypes.func\n}","import React, { lazy, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Title } from './ContactsPage.styled';\nimport { Form } from '../components/Form/Form';\nimport { InputFilter } from 'components/InputFilter/InputFilter';\nimport { selectFilters } from 'redux/Contacts/Contacts.selector';\nimport { usersSearchAction } from 'redux/Contacts/Contacts.slice';\nimport { useFetchContactsQuery } from 'redux/rtk-contacts/rtk-contacts.api';\n\nconst LazyContacts = lazy(() => import('../components/Contacts/Contacts'));\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  const { isLoading, isSuccess } = useFetchContactsQuery();\n  const filter = useSelector(selectFilters);\n  const addFilter = (value) => {\n    dispatch(usersSearchAction(value));\n  };\n\n  return (\n    <>\n      <Form />\n      <Title>Contacts</Title>\n      <InputFilter onInput={addFilter} value={filter} />\n      {isLoading && <Title>Loading...</Title>}\n      {isSuccess && (\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyContacts />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default ContactsPage;\n","\nexport const selectFilters = state =>  state.filter.search\n\n"],"names":["Title","styled","FormWrap","SubmitBtn","Button","Label","Form","useState","name","setName","number","setNumber","data","useFetchContactsQuery","usePostContactsMutation","addUser","addContact","value","undefined","find","contact","checkIsInContacts","alert","autoComplete","onSubmit","e","preventDefault","target","reset","TextField","type","onChange","currentTarget","pattern","title","id","label","variant","required","InputFilter","filter","useSelector","selectFilters","dispatch","useDispatch","onInput","usersSearchAction","LazyContacts","lazy","ContactsPage","isLoading","isSuccess","Suspense","fallback","state","search"],"sourceRoot":""}